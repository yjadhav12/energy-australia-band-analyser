/*
 * Energy Australia Coding Test API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Band;
import io.swagger.client.model.MusicFestival;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FestivalsApi {
    private ApiClient apiClient;

    public FestivalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FestivalsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for aPIFestivalsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call aPIFestivalsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/festivals";
        //String localVarPath = "";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aPIFestivalsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = aPIFestivalsGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @return List&lt;MusicFestival&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MusicFestival> aPIFestivalsGet() throws ApiException {
        ApiResponse<List<MusicFestival>> resp = aPIFestivalsGetWithHttpInfo();

        //TODO - Un comment below line to mock the response in case of any API or access issues
        // resp = new ApiResponse(resp.getStatusCode(), resp.getHeaders(), populateMockData() );
        return resp.getData();
    }

    private List<MusicFestival> populateMockData() {

        /*{
            "name": "Small Night In",
                "bands": [
            {
                "name": "Yanke East",
                    "recordLabel": "MEDIOCRE Music"
            },
            {
                "name": "The Black Dashes",
                    "recordLabel": "Fourth Woman Records"
            },
            {
                "name": "Squint-281",
                    "recordLabel": "Outerscope"
            },
            {
                "name": "Green Mild Cold Capsicum",
                    "recordLabel": "Marner Sis. Recording"
            },
            {
                "name": "Wild Antelope",
                    "recordLabel": "Marner Sis. Recording"
            }
    ]
        },
        {
            "name": "LOL-palooza",
                "bands": [
            {
                "name": "Werewolf Weekday",
                    "recordLabel": "XS Recordings"
            },
            {
                "name": "Frank Jupiter",
                    "recordLabel": "Pacific Records"
            },
            {
                "name": "Winter Primates",
                    "recordLabel": ""
            },
            {
                "name": "Jill Black",
                    "recordLabel": "Fourth Woman Records"
            }
    ]
        },
        {
            "name": "Trainerella",
                "bands": [
            {
                "name": "Wild Antelope",
                    "recordLabel": "Still Bottom Records"
            },
            {
                "name": "Adrian Venti",
                    "recordLabel": "Monocracy Records"
            },
            {
                "name": "Manish Ditch",
                    "recordLabel": "ACR"
            },
            {
                "name": "YOUKRANE",
                    "recordLabel": "Anti Records"
            }
    ]
        }
        */
        List<MusicFestival> listResponse = new ArrayList<MusicFestival>();

        MusicFestival musicFestival = new MusicFestival();
        musicFestival.setName("Small Night In");

        List<Band> listBand = new ArrayList<>();

        Band band = new Band();
        band.setName("Yanke East");
        band.setRecordLabel("MEDIOCRE Music");
        listBand.add(band);

        band = new Band();
        band.setName("The Black Dashes");
        band.setRecordLabel("Fourth Woman Records");
        listBand.add(band);

        band = new Band();
        band.setName("Squint-281");
        band.setRecordLabel("Outerscope");
        listBand.add(band);

        band = new Band();
        band.setName("Green Mild Cold Capsicum");
        band.setRecordLabel("Marner Sis. Recording");
        listBand.add(band);

        band = new Band();
        band.setName("Wild Antelope");
        band.setRecordLabel("Marner Sis. Recording");
        listBand.add(band);

        musicFestival.setBands(listBand);

        listResponse.add(musicFestival);

        /////////////////


        musicFestival = new MusicFestival();
        musicFestival.setName("LOL-palooza");

        listBand = new ArrayList<>();

        band = new Band();
        band.setName("Yanke East");
        band.setRecordLabel("MEDIOCRE Music");
        listBand.add(band);

        band = new Band();
        band.setName("Yanke East33");
        band.setRecordLabel("MEDIOCRE Music");
        listBand.add(band);

        band = new Band();
        band.setName("Werewolf Weekday");
        band.setRecordLabel("XS Recordings");
        listBand.add(band);

        band = new Band();
        band.setName("Frank Jupiter");
        band.setRecordLabel("Pacific Records");
        listBand.add(band);

        band = new Band();
        band.setName("Winter Primates");
        band.setRecordLabel("");
        listBand.add(band);

        band = new Band();
        band.setName("Jill Black");
        band.setRecordLabel("Fourth Woman Records");
        listBand.add(band);

        musicFestival.setBands(listBand);

        listResponse.add(musicFestival);

        ///////////


        musicFestival = new MusicFestival();
        musicFestival.setName("Trainerella");

        listBand = new ArrayList<>();

        band = new Band();
        band.setName("Wild Antelope");
        band.setRecordLabel("Still Bottom Records");
        listBand.add(band);

        band = new Band();
        band.setName("Adrian Venti");
        band.setRecordLabel("Monocracy Records");
        listBand.add(band);

        band = new Band();
        band.setName("Manish Ditch");
        band.setRecordLabel("ACR");
        listBand.add(band);

        band = new Band();
        band.setName("YOUKRANE");
        band.setRecordLabel("Anti Records");
        listBand.add(band);

        musicFestival.setBands(listBand);
        listResponse.add(musicFestival);


        return listResponse;
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;MusicFestival&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MusicFestival>> aPIFestivalsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = aPIFestivalsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<MusicFestival>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aPIFestivalsGetAsync(final ApiCallback<List<MusicFestival>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aPIFestivalsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MusicFestival>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
